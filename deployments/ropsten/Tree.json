{
  "address": "0x3c94f82557a799443125c2a662F94Cef92516f52",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "_parent",
          "type": "uint32"
        }
      ],
      "name": "VertexInserted",
      "type": "event"
    }
  ],
  "transactionHash": "0xdd669bd8374c7586c6d6dcfff737f40fb0b11a1075e454bc2c46a6c40db37591",
  "receipt": {
    "to": null,
    "from": "0x18930e8a66a1DbE21D00581216789AAB7460Afd0",
    "contractAddress": "0x3c94f82557a799443125c2a662F94Cef92516f52",
    "transactionIndex": 46,
    "gasUsed": "796770",
    "logsBloom": "0x
    "blockHash": "0x1e7bcc3fe1db5a3590d73decce0da4b643051231d15e61ed5715b8c5b2e279e9",
    "transactionHash": "0xdd669bd8374c7586c6d6dcfff737f40fb0b11a1075e454bc2c46a6c40db37591",
    "logs": [],
    "blockNumber": 11351629,
    "cumulativeGasUsed": "6182991",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "00f505aa0fb0f0fcf75055cb69246686",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"_parent\",\"type\":\"uint32\"}],\"name\":\"VertexInserted\",\"type\":\"event\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"getAncestorAtDepth(Tree.TreeCtx storage,uint32,uint32)\":{\"params\":{\"_depth\":\"the depth of the ancestor\",\"_tree\":\"pointer to the tree storage\",\"_vertex\":\"the index of the vertex in the vertices array (tree)\"},\"returns\":{\"_0\":\"index of ancestor at depth of _vertex\"}},\"getDeepest(Tree.TreeCtx storage)\":{\"params\":{\"_tree\":\"pointer to the tree storage\"},\"returns\":{\"_0\":\"index number and depth of the deepest vertex\"}},\"getDepth(Tree.TreeCtx storage,uint32)\":{\"params\":{\"_tree\":\"pointer to the tree storage\",\"_vertex\":\"the index of the vertex in the vertices array (tree)\"}},\"getTreeSize(Tree.TreeCtx storage)\":{\"params\":{\"_tree\":\"pointer to the tree storage\"}},\"getVertex(Tree.TreeCtx storage,uint32)\":{\"params\":{\"_tree\":\"pointer to the tree storage\",\"_vertex\":\"the index of the vertex in the vertices array (tree)\"}},\"insertVertex(Tree.TreeCtx storage,uint256,uint32)\":{\"params\":{\"_id\":\"the identifier to differentiate each tree from caller contract\",\"_parent\":\"the index of parent vertex in the vertices array (tree)\",\"_tree\":\"pointer to the tree storage\"},\"returns\":{\"_0\":\"index of the inserted vertex\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"getAncestorAtDepth(Tree.TreeCtx storage,uint32,uint32)\":{\"notice\":\"Search an ancestor of a vertex in the tree at a certain depth\"},\"getDeepest(Tree.TreeCtx storage)\":{\"notice\":\"Get current tree size\"},\"getDepth(Tree.TreeCtx storage,uint32)\":{\"notice\":\"Get depth of vertex\"},\"getTreeSize(Tree.TreeCtx storage)\":{\"notice\":\"Get current tree size\"},\"getVertex(Tree.TreeCtx storage,uint32)\":{\"notice\":\"Get vertex from the tree\"},\"insertVertex(Tree.TreeCtx storage,uint256,uint32)\":{\"notice\":\"Insert a vertex to the tree\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Tree.sol\":\"Tree\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/Tree.sol\":{\"content\":\"// Copyright 2020 Cartesi Pte. Ltd.\\n\\n// SPDX-License-Identifier: Apache-2.0\\n// Licensed under the Apache License, Version 2.0 (the \\\"License\\\"); you may not use\\n// this file except in compliance with the License. You may obtain a copy of the\\n// License at http://www.apache.org/licenses/LICENSE-2.0\\n\\n// Unless required by applicable law or agreed to in writing, software distributed\\n// under the License is distributed on an \\\"AS IS\\\" BASIS, WITHOUT WARRANTIES OR\\n// CONDITIONS OF ANY KIND, either express or implied. See the License for the\\n// specific language governing permissions and limitations under the License.\\n\\n/// @title Tree Library\\npragma abicoder v2;\\npragma solidity ^0.8.0;\\n\\nlibrary Tree {\\n    uint32 constant UINT32_MAX = 2**32 - 1;\\n    // count of trailing ones for [0:256)\\n    bytes constant trailing1table =\\n        hex\\\"00010002000100030001000200010004000100020001000300010002000100050001000200010003000100020001000400010002000100030001000200010006000100020001000300010002000100040001000200010003000100020001000500010002000100030001000200010004000100020001000300010002000100070001000200010003000100020001000400010002000100030001000200010005000100020001000300010002000100040001000200010003000100020001000600010002000100030001000200010004000100020001000300010002000100050001000200010003000100020001000400010002000100030001000200010008\\\";\\n\\n    struct TreeCtx {\\n        Vertex[] vertices;\\n        uint32 deepestVertex;\\n        uint32 deepestDepth;\\n    }\\n\\n    struct Vertex {\\n        uint32[] ancestors; // pointers to ancestors' indices in the vertices array (tree)\\n        uint32 depth; // depth of the vertex in the tree\\n    }\\n\\n    // Because Tree is a library, the event is going to be emitted from the caller contract.\\n    // When there're multiple objects of this library,\\n    // we need this `_id` to differentiate one from another\\n    event VertexInserted(uint256 indexed _id, uint32 _parent);\\n\\n    // event VertexInserted(uint32 _index, Vertex _vertex);\\n\\n    /// @notice Insert a vertex to the tree\\n    /// @param _tree pointer to the tree storage\\n    /// @param _id the identifier to differentiate each tree from caller contract\\n    /// @param _parent the index of parent vertex in the vertices array (tree)\\n    /// @return index of the inserted vertex\\n    function insertVertex(\\n        TreeCtx storage _tree,\\n        uint256 _id,\\n        uint32 _parent\\n    ) public returns (uint32) {\\n        Vertex memory v;\\n        uint32 treeSize = uint32(_tree.vertices.length);\\n\\n        if (treeSize == 0) {\\n            // insert the very first vertex into the tree\\n            v = Vertex(new uint32[](0), 0);\\n        } else {\\n            // insert vertex to the tree attaching to another vertex\\n            require(\\n                _parent < treeSize,\\n                \\\"parent index exceeds current tree size\\\"\\n            );\\n\\n            uint32 parentDepth = _tree.vertices[_parent].depth;\\n            // calculate all ancestors' depths of the new vertex\\n            uint32[] memory requiredDepths = getRequiredDepths(parentDepth + 1);\\n            uint32[] memory ancestors = new uint32[](requiredDepths.length);\\n\\n            // construct the ancestors array by getting index of each ancestor in requiredDepths\\n            for (uint32 i = 0; i < requiredDepths.length; ++i) {\\n                ancestors[i] = getAncestorAtDepth(\\n                    _tree,\\n                    _parent,\\n                    requiredDepths[i]\\n                );\\n            }\\n\\n            v = Vertex(ancestors, parentDepth + 1);\\n        }\\n\\n        _tree.vertices.push(v);\\n\\n        if (v.depth > _tree.deepestDepth) {\\n            _tree.deepestDepth = v.depth;\\n            _tree.deepestVertex = treeSize;\\n        }\\n\\n        emit VertexInserted(_id, _parent);\\n\\n        return treeSize;\\n    }\\n\\n    /// @notice Search an ancestor of a vertex in the tree at a certain depth\\n    /// @param _tree pointer to the tree storage\\n    /// @param _vertex the index of the vertex in the vertices array (tree)\\n    /// @param _depth the depth of the ancestor\\n    /// @return index of ancestor at depth of _vertex\\n    function getAncestorAtDepth(\\n        TreeCtx storage _tree,\\n        uint32 _vertex,\\n        uint32 _depth\\n    ) public view returns (uint32) {\\n        require(\\n            _vertex < _tree.vertices.length,\\n            \\\"vertex index exceeds current tree size\\\"\\n        );\\n        require(\\n            _depth <= _tree.vertices[_vertex].depth,\\n            \\\"search depth deeper than vertex depth\\\"\\n        );\\n\\n        uint32 vertex = _vertex;\\n\\n        while (_depth != _tree.vertices[vertex].depth) {\\n            uint32[] storage ancestorsOfVertex = _tree\\n            .vertices[vertex]\\n            .ancestors;\\n            uint32 ancestorsLength = uint32(ancestorsOfVertex.length);\\n            // start searching from the oldest ancestor (smallest depth)\\n            // example: search ancestor at depth d(20, b'0001 0100) from vertex v at depth (176, b'1011 0000)\\n            //    b'1011 0000 -> b'1010 0000 -> b'1000 0000\\n            // -> b'0100 0000 -> b'0010 0000 -> b'0001 1000\\n            // -> b'0001 0100\\n\\n            // given that ancestorsIndex is unsigned, when -1 at 0, it'll underflow and become UINT32_MAX\\n            // so the continue condition has to be ancestorsIndex < ancestorsLength,\\n            // can't be ancestorsIndex >= 0\\n            unchecked {\\n                for (\\n                    uint32 ancestorsIndex = ancestorsLength - 1;\\n                    ancestorsIndex < ancestorsLength;\\n                    --ancestorsIndex\\n                ) {\\n                    vertex = ancestorsOfVertex[ancestorsIndex];\\n\\n                    // stop at the ancestor who's closest to the target depth\\n                    if (_tree.vertices[vertex].depth >= _depth) {\\n                        break;\\n                    }\\n                }\\n            }\\n        }\\n\\n        return vertex;\\n    }\\n\\n    /// @notice Get depth of vertex\\n    /// @param _tree pointer to the tree storage\\n    /// @param _vertex the index of the vertex in the vertices array (tree)\\n    function getDepth(TreeCtx storage _tree, uint32 _vertex)\\n        public\\n        view\\n        returns (uint32)\\n    {\\n        return getVertex(_tree, _vertex).depth;\\n    }\\n\\n    /// @notice Get vertex from the tree\\n    /// @param _tree pointer to the tree storage\\n    /// @param _vertex the index of the vertex in the vertices array (tree)\\n    function getVertex(TreeCtx storage _tree, uint32 _vertex)\\n        public\\n        view\\n        returns (Tree.Vertex memory)\\n    {\\n        require(\\n            _vertex < _tree.vertices.length,\\n            \\\"vertex index exceeds current tree size\\\"\\n        );\\n\\n        return _tree.vertices[_vertex];\\n    }\\n\\n    /// @notice Get current tree size\\n    /// @param _tree pointer to the tree storage\\n    function getTreeSize(TreeCtx storage _tree) public view returns (uint32) {\\n        return uint32(_tree.vertices.length);\\n    }\\n\\n    /// @notice Get current tree size\\n    /// @param _tree pointer to the tree storage\\n    /// @return index number and depth of the deepest vertex\\n    function getDeepest(TreeCtx storage _tree)\\n        public\\n        view\\n        returns (uint32, uint32)\\n    {\\n        return (_tree.deepestVertex, _tree.deepestDepth);\\n    }\\n\\n    function getRequiredDepths(uint32 _depth)\\n        private\\n        pure\\n        returns (uint32[] memory)\\n    {\\n        // parent is always included in the ancestors\\n        uint32 depth = _depth - 1;\\n        uint32 count = 1;\\n\\n        // algorithm 1\\n        // get count of trailing ones of _depth from trailing1table\\n        for (uint256 i = 0; i < 4; ++i) {\\n            uint32 partialCount = uint8(trailing1table[depth >> (i * 8) & 0xff]);\\n            count = count + partialCount;\\n            if (partialCount != 8) {\\n                break;\\n            }\\n        }\\n\\n        // algorithm 2\\n        // get count of trailing ones by counting them\\n        // {\\n        //     while (depth & 1 > 0) {\\n        //         depth = depth >> 1;\\n        //         ++count;\\n        //     }\\n\\n        //     depth = _depth - 1;\\n        // }\\n\\n        uint32[] memory depths = new uint32[](count);\\n\\n        // construct the depths array by removing the trailing ones from lsb one by one\\n        // example _depth = b'1100 0000: b'1011 1111 -> b'1011 1110 -> b'1011 1100\\n        //                            -> b'1011 1000 -> b'1011 0000 -> b'1010 0000\\n        //                            -> b'1000 0000\\n        for (uint32 i = 0; i < count; ++i) {\\n            depths[i] = depth;\\n            depth = depth & (UINT32_MAX << (i + 1));\\n        }\\n\\n        return depths;\\n    }\\n}\\n\",\"keccak256\":\"0x086048849655fa6dc92ce70f2775aa5ad5045896dd33fc9ea0a4f062cce50e2e\",\"license\":\"Apache-2.0\"}},\"version\":1}",
  "bytecode": "0x610d7b61003a600b82828239805160001a60731461002d57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe730000000000000000000000000000000000000000301460806040526004361061006c5760003560e01c8063202449aa14610071578063506923c1146100ab578063694884b6146100be5780636af5673e146101035780636b5feffa146101155780638835022c14610135575b600080fd5b81801561007d57600080fd5b5061009161008c366004610a45565b610148565b60405163ffffffff90911681526020015b60405180910390f35b6100916100b9366004610a79565b61045b565b6100e66100cc366004610a2d565b6001015463ffffffff808216926401000000009092041690565b6040805163ffffffff9384168152929091166020830152016100a2565b610091610111366004610a2d565b5490565b610128610123366004610a79565b610472565b6040516100a29190610b1c565b610091610143366004610aa4565b61058c565b604080518082019091526060815260006020820181905290845463ffffffff8116610192576040805160008183018181526060830190935291815260208101919091529150610376565b8063ffffffff168463ffffffff16106102015760405162461bcd60e51b815260206004820152602660248201527f706172656e7420696e64657820657863656564732063757272656e7420747265604482015265652073697a6560d01b60648201526084015b60405180910390fd5b6000866000018563ffffffff168154811061022c57634e487b7160e01b600052603260045260246000fd5b600091825260208220600160029092020181015463ffffffff16925061025c90610257908490610b84565b6107bc565b90506000815167ffffffffffffffff81111561028857634e487b7160e01b600052604160045260246000fd5b6040519080825280602002602001820160405280156102b1578160200160208202803683370190505b50905060005b82518163ffffffff161015610349576102fe8a89858463ffffffff16815181106102f157634e487b7160e01b600052603260045260246000fd5b602002602001015161058c565b828263ffffffff168151811061032457634e487b7160e01b600052603260045260246000fd5b63ffffffff9092166020928302919091019091015261034281610c0b565b90506102b7565b5060405180604001604052808281526020018460016103689190610b84565b63ffffffff16905294505050505b85546001810187556000878152602090819020845180518694600202909201926103a592849290910190610950565b506020918201516001918201805463ffffffff191663ffffffff928316179055908801549184015164010000000090920481169116111561041757602082015160018701805467ffffffffffffffff191664010000000063ffffffff9384160263ffffffff1916179183169190911790555b60405163ffffffff8516815285907f4f53fe376c2872b56e39c47051086455afd7d2cf37e194e8a7ad038197c43cc59060200160405180910390a295945050505050565b60006104678383610472565b602001519392505050565b604080518082019091526060815260006020820152825463ffffffff8316106104ad5760405162461bcd60e51b81526004016101f890610ad6565b826000018263ffffffff16815481106104d657634e487b7160e01b600052603260045260246000fd5b90600052602060002090600202016040518060400160405290816000820180548060200260200160405190810160405280929190818152602001828054801561056a57602002820191906000526020600020906000905b82829054906101000a900463ffffffff1663ffffffff168152602001906004019060208260030104928301926001038202915080841161052d5790505b50505091835250506001919091015463ffffffff166020909101529392505050565b825460009063ffffffff8416106105b55760405162461bcd60e51b81526004016101f890610ad6565b836000018363ffffffff16815481106105de57634e487b7160e01b600052603260045260246000fd5b600091825260209091206001600290920201015463ffffffff90811690831611156106595760405162461bcd60e51b815260206004820152602560248201527f73656172636820646570746820646565706572207468616e20766572746578206044820152640c8cae0e8d60db1b60648201526084016101f8565b825b846000018163ffffffff168154811061068457634e487b7160e01b600052603260045260246000fd5b600091825260209091206001600290920201015463ffffffff8481169116146107b4576000856000018263ffffffff16815481106106d257634e487b7160e01b600052603260045260246000fd5b60009182526020909120600290910201805490915060001981015b8163ffffffff168163ffffffff1610156107ac57828163ffffffff168154811061072757634e487b7160e01b600052603260045260246000fd5b90600052602060002090600891828204019190066004029054906101000a900463ffffffff1693508563ffffffff16886000018563ffffffff168154811061077f57634e487b7160e01b600052603260045260246000fd5b600091825260209091206001600290920201015463ffffffff16106107a3576107ac565b600019016106ed565b50505061065b565b949350505050565b606060006107cb600184610bcb565b9050600160005b600481101561086f5760006040518061012001604052806101008152602001610c466101009139610804836008610bac565b8563ffffffff16901c60ff1663ffffffff168151811061083457634e487b7160e01b600052603260045260246000fd5b016020015160f81c90506108488184610b84565b92508063ffffffff1660081461085e575061086f565b5061086881610bf0565b90506107d2565b5060008163ffffffff1667ffffffffffffffff81111561089f57634e487b7160e01b600052604160045260246000fd5b6040519080825280602002602001820160405280156108c8578160200160208202803683370190505b50905060005b8263ffffffff168163ffffffff1610156109475783828263ffffffff168151811061090957634e487b7160e01b600052603260045260246000fd5b63ffffffff90921660209283029190910190910152610929816001610b84565b63ffffffff9081161b939093169261094081610c0b565b90506108ce565b50949350505050565b828054828255906000526020600020906007016008900481019282156109ef5791602002820160005b838211156109bd57835183826101000a81548163ffffffff021916908363ffffffff1602179055509260200192600401602081600301049283019260010302610979565b80156109ed5782816101000a81549063ffffffff02191690556004016020816003010492830192600103026109bd565b505b506109fb9291506109ff565b5090565b5b808211156109fb5760008155600101610a00565b803563ffffffff81168114610a2857600080fd5b919050565b600060208284031215610a3e578081fd5b5035919050565b600080600060608486031215610a59578182fd5b8335925060208401359150610a7060408501610a14565b90509250925092565b60008060408385031215610a8b578182fd5b82359150610a9b60208401610a14565b90509250929050565b600080600060608486031215610ab8578283fd5b83359250610ac860208501610a14565b9150610a7060408501610a14565b60208082526026908201527f76657274657820696e64657820657863656564732063757272656e7420747265604082015265652073697a6560d01b606082015260800190565b6020808252825160408383015280516060840181905260009291820190839060808601905b80831015610b6757835163ffffffff168252928401926001929092019190840190610b41565b5063ffffffff848801511660408701528094505050505092915050565b600063ffffffff808316818516808303821115610ba357610ba3610c2f565b01949350505050565b6000816000190483118215151615610bc657610bc6610c2f565b500290565b600063ffffffff83811690831681811015610be857610be8610c2f565b039392505050565b6000600019821415610c0457610c04610c2f565b5060010190565b600063ffffffff80831681811415610c2557610c25610c2f565b6001019392505050565b634e487b7160e01b600052601160045260246000fdfea2646970667358221220a8cd1bcf4cb1800c77d3cc0f291ea10dd652e5e2ab37b3dd54bd61a52cbc9d3c64736f6c63430008040033",
  "deployedBytecode": "0x730000000000000000000000000000000000000000301460806040526004361061006c5760003560e01c8063202449aa14610071578063506923c1146100ab578063694884b6146100be5780636af5673e146101035780636b5feffa146101155780638835022c14610135575b600080fd5b81801561007d57600080fd5b5061009161008c366004610a45565b610148565b60405163ffffffff90911681526020015b60405180910390f35b6100916100b9366004610a79565b61045b565b6100e66100cc366004610a2d565b6001015463ffffffff808216926401000000009092041690565b6040805163ffffffff9384168152929091166020830152016100a2565b610091610111366004610a2d565b5490565b610128610123366004610a79565b610472565b6040516100a29190610b1c565b610091610143366004610aa4565b61058c565b604080518082019091526060815260006020820181905290845463ffffffff8116610192576040805160008183018181526060830190935291815260208101919091529150610376565b8063ffffffff168463ffffffff16106102015760405162461bcd60e51b815260206004820152602660248201527f706172656e7420696e64657820657863656564732063757272656e7420747265604482015265652073697a6560d01b60648201526084015b60405180910390fd5b6000866000018563ffffffff168154811061022c57634e487b7160e01b600052603260045260246000fd5b600091825260208220600160029092020181015463ffffffff16925061025c90610257908490610b84565b6107bc565b90506000815167ffffffffffffffff81111561028857634e487b7160e01b600052604160045260246000fd5b6040519080825280602002602001820160405280156102b1578160200160208202803683370190505b50905060005b82518163ffffffff161015610349576102fe8a89858463ffffffff16815181106102f157634e487b7160e01b600052603260045260246000fd5b602002602001015161058c565b828263ffffffff168151811061032457634e487b7160e01b600052603260045260246000fd5b63ffffffff9092166020928302919091019091015261034281610c0b565b90506102b7565b5060405180604001604052808281526020018460016103689190610b84565b63ffffffff16905294505050505b85546001810187556000878152602090819020845180518694600202909201926103a592849290910190610950565b506020918201516001918201805463ffffffff191663ffffffff928316179055908801549184015164010000000090920481169116111561041757602082015160018701805467ffffffffffffffff191664010000000063ffffffff9384160263ffffffff1916179183169190911790555b60405163ffffffff8516815285907f4f53fe376c2872b56e39c47051086455afd7d2cf37e194e8a7ad038197c43cc59060200160405180910390a295945050505050565b60006104678383610472565b602001519392505050565b604080518082019091526060815260006020820152825463ffffffff8316106104ad5760405162461bcd60e51b81526004016101f890610ad6565b826000018263ffffffff16815481106104d657634e487b7160e01b600052603260045260246000fd5b90600052602060002090600202016040518060400160405290816000820180548060200260200160405190810160405280929190818152602001828054801561056a57602002820191906000526020600020906000905b82829054906101000a900463ffffffff1663ffffffff168152602001906004019060208260030104928301926001038202915080841161052d5790505b50505091835250506001919091015463ffffffff166020909101529392505050565b825460009063ffffffff8416106105b55760405162461bcd60e51b81526004016101f890610ad6565b836000018363ffffffff16815481106105de57634e487b7160e01b600052603260045260246000fd5b600091825260209091206001600290920201015463ffffffff90811690831611156106595760405162461bcd60e51b815260206004820152602560248201527f73656172636820646570746820646565706572207468616e20766572746578206044820152640c8cae0e8d60db1b60648201526084016101f8565b825b846000018163ffffffff168154811061068457634e487b7160e01b600052603260045260246000fd5b600091825260209091206001600290920201015463ffffffff8481169116146107b4576000856000018263ffffffff16815481106106d257634e487b7160e01b600052603260045260246000fd5b60009182526020909120600290910201805490915060001981015b8163ffffffff168163ffffffff1610156107ac57828163ffffffff168154811061072757634e487b7160e01b600052603260045260246000fd5b90600052602060002090600891828204019190066004029054906101000a900463ffffffff1693508563ffffffff16886000018563ffffffff168154811061077f57634e487b7160e01b600052603260045260246000fd5b600091825260209091206001600290920201015463ffffffff16106107a3576107ac565b600019016106ed565b50505061065b565b949350505050565b606060006107cb600184610bcb565b9050600160005b600481101561086f5760006040518061012001604052806101008152602001610c466101009139610804836008610bac565b8563ffffffff16901c60ff1663ffffffff168151811061083457634e487b7160e01b600052603260045260246000fd5b016020015160f81c90506108488184610b84565b92508063ffffffff1660081461085e575061086f565b5061086881610bf0565b90506107d2565b5060008163ffffffff1667ffffffffffffffff81111561089f57634e487b7160e01b600052604160045260246000fd5b6040519080825280602002602001820160405280156108c8578160200160208202803683370190505b50905060005b8263ffffffff168163ffffffff1610156109475783828263ffffffff168151811061090957634e487b7160e01b600052603260045260246000fd5b63ffffffff90921660209283029190910190910152610929816001610b84565b63ffffffff9081161b939093169261094081610c0b565b90506108ce565b50949350505050565b828054828255906000526020600020906007016008900481019282156109ef5791602002820160005b838211156109bd57835183826101000a81548163ffffffff021916908363ffffffff1602179055509260200192600401602081600301049283019260010302610979565b80156109ed5782816101000a81549063ffffffff02191690556004016020816003010492830192600103026109bd565b505b506109fb9291506109ff565b5090565b5b808211156109fb5760008155600101610a00565b803563ffffffff81168114610a2857600080fd5b919050565b600060208284031215610a3e578081fd5b5035919050565b600080600060608486031215610a59578182fd5b8335925060208401359150610a7060408501610a14565b90509250925092565b60008060408385031215610a8b578182fd5b82359150610a9b60208401610a14565b90509250929050565b600080600060608486031215610ab8578283fd5b83359250610ac860208501610a14565b9150610a7060408501610a14565b60208082526026908201527f76657274657820696e64657820657863656564732063757272656e7420747265604082015265652073697a6560d01b606082015260800190565b6020808252825160408383015280516060840181905260009291820190839060808601905b80831015610b6757835163ffffffff168252928401926001929092019190840190610b41565b5063ffffffff848801511660408701528094505050505092915050565b600063ffffffff808316818516808303821115610ba357610ba3610c2f565b01949350505050565b6000816000190483118215151615610bc657610bc6610c2f565b500290565b600063ffffffff83811690831681811015610be857610be8610c2f565b039392505050565b6000600019821415610c0457610c04610c2f565b5060010190565b600063ffffffff80831681811415610c2557610c25610c2f565b6001019392505050565b634e487b7160e01b600052601160045260246000fdfea2646970667358221220a8cd1bcf4cb1800c77d3cc0f291ea10dd652e5e2ab37b3dd54bd61a52cbc9d3c64736f6c63430008040033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "getAncestorAtDepth(Tree.TreeCtx storage,uint32,uint32)": {
        "params": {
          "_depth": "the depth of the ancestor",
          "_tree": "pointer to the tree storage",
          "_vertex": "the index of the vertex in the vertices array (tree)"
        },
        "returns": {
          "_0": "index of ancestor at depth of _vertex"
        }
      },
      "getDeepest(Tree.TreeCtx storage)": {
        "params": {
          "_tree": "pointer to the tree storage"
        },
        "returns": {
          "_0": "index number and depth of the deepest vertex"
        }
      },
      "getDepth(Tree.TreeCtx storage,uint32)": {
        "params": {
          "_tree": "pointer to the tree storage",
          "_vertex": "the index of the vertex in the vertices array (tree)"
        }
      },
      "getTreeSize(Tree.TreeCtx storage)": {
        "params": {
          "_tree": "pointer to the tree storage"
        }
      },
      "getVertex(Tree.TreeCtx storage,uint32)": {
        "params": {
          "_tree": "pointer to the tree storage",
          "_vertex": "the index of the vertex in the vertices array (tree)"
        }
      },
      "insertVertex(Tree.TreeCtx storage,uint256,uint32)": {
        "params": {
          "_id": "the identifier to differentiate each tree from caller contract",
          "_parent": "the index of parent vertex in the vertices array (tree)",
          "_tree": "pointer to the tree storage"
        },
        "returns": {
          "_0": "index of the inserted vertex"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "getAncestorAtDepth(Tree.TreeCtx storage,uint32,uint32)": {
        "notice": "Search an ancestor of a vertex in the tree at a certain depth"
      },
      "getDeepest(Tree.TreeCtx storage)": {
        "notice": "Get current tree size"
      },
      "getDepth(Tree.TreeCtx storage,uint32)": {
        "notice": "Get depth of vertex"
      },
      "getTreeSize(Tree.TreeCtx storage)": {
        "notice": "Get current tree size"
      },
      "getVertex(Tree.TreeCtx storage,uint32)": {
        "notice": "Get vertex from the tree"
      },
      "insertVertex(Tree.TreeCtx storage,uint256,uint32)": {
        "notice": "Insert a vertex to the tree"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}